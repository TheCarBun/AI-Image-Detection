import streamlit as st
from streamlit import session_state as sst

import requests, os
from dotenv import load_dotenv
load_dotenv()

token = os.getenv('hf_token')

API_URL = "https://api-inference.huggingface.co/models/umm-maybe/AI-image-detector"
headers = {"Authorization": f"Bearer {token}"}


# AI Image Detector Model API
def get_ai_probability(img_data): # get probability for image being AI generated
    response = requests.post(API_URL, headers=headers, data=img_data)
    prob_json = response.json()
    print(prob_json)
    for item in prob_json:
        if item['label'] == 'artificial':
            return item['score']

# Get description for different values of probability
def get_description(probability):
    description=''
    if probability <= 0.1:
        description ="**High Probability of Human Creation:**\n The image is very likely created by a human. With a probability of AI generation being **less than 10%**, the system strongly suggests that the image is the result of ***traditional human creativity***, with little to no involvement of AI."
    elif probability > 0.1 and probability <= 0.3:
        description ="**Likely Human-Created:** The image is likely to have been created by a human, though there is still a chance that AI tools played a minor role. The relatively low probability of AI generation suggests that the design elements were mostly or entirely crafted by a human artist or designer."
    elif probability >0.3  and probability <=0.5:
        description = "**Uncertain Origin:** The system is uncertain whether the image is AI-generated or human-made. With a probability close to 50%, the creation process could involve ***either AI or human design, or a combination of both***. The likelihood of AI and human involvement is almost equal."
    elif probability >0.5  and probability <=0.7:
        description = "**Possibly AI-Generated:** The image is possibly created by AI, but it is *not entirely certain*. The probability indicates that AI may have had a significant role in generating the image, but human input or traditional design techniques could also have contributed."
    elif probability >0.7  and probability <=0.9:
        description = "**Likely AI-Generated:** The image is likely generated by AI. With a probability between **70% and 90%**, it is probable that the image was created or heavily modified by artificial intelligence, although there *may still be some human involvement* in the process."
    else:
        description="**High Probability of AI Generation:** The image is very likely generated by artificial intelligence. With a probability greater than 90%, the system strongly suggests that the image was created using AI tools or algorithms. The level of human intervention in the creative process is probably minimal."
    return description

def main():
    st.set_page_config(page_title="AI Image Detection", page_icon='🎨')
    
    st.title(body="✨ AI Image Detector")
    prob_value = 0
    with st.container(border=True):
        st.info(body="Upload an Image to check if it's made using AI", icon="🎨")
        if image := st.file_uploader(label="Upload an Image", type=['.jpeg', '.jpg', '.png'], help="Upload image to check if it's AI or human made", label_visibility="collapsed"):
            if st.button("Click to Check"):
                prob_value = get_ai_probability(image.read())
                prob_value = round(prob_value, 2)
        # else:
        #     st.info(icon='😓', body="Upload an Image")
    if image and prob_value!=0:
        with st.container(border=True):
            col1, col2 = st.columns([3,7])
            with col1:
                st.image(image)
            with col2:
                if prob_value>=0.7:
                    st.success(f"Score = {(prob_value*100)}% AI Generated", icon='🤖')
                elif prob_value>=0.3 and prob_value<0.7:
                    st.warning(f"Score = {(prob_value*100)}% AI Generated", icon='🤔')
                else:
                    st.error(f"Score = {(prob_value*100)}% AI Generated", icon='✌🏻')
                st.markdown(get_description(prob_value))


if __name__ == '__main__':
    main()